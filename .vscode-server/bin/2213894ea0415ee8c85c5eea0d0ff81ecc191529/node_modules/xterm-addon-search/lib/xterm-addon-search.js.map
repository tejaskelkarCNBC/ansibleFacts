{"version":3,"sources":["webpack://SearchAddon/webpack/universalModuleDefinition","webpack://SearchAddon/webpack/bootstrap","webpack://SearchAddon/./src/SearchAddon.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SearchAddon","this","_linesCacheTimeoutId","activate","terminal","_terminal","dispose","findNext","term","searchOptions","Error","length","clearSelection","startCol","startRow","buffer","viewportY","hasSelection","incremental","currentSelection","getSelectionPosition","endRow","startColumn","endColumn","_initLinesCache","findingRow","cumulativeCols","currentLine","getLine","isWrapped","cols","result","_findInLine","y","baseY","rows","_selectResult","findPrevious","line","searchFrom","_this","_linesCache","Array","_cursorMoveListener","onCursorMove","_destroyLinesCache","_resizeListener","onResize","clearTimeout","setTimeout","undefined","_isWholeWord","searchIndex","indexOf","row","col","isReverseSearch","firstLine","stringLine","_translateBufferLineToStringWithWrap","searchTerm","caseSensitive","toLowerCase","searchStringLine","resultIndex","regex","searchRegex","RegExp","foundTerm","exec","slice","lastIndex","lastIndexOf","Math","floor","wholeWord","cell","getCell","char","width","lineIndex","trimRight","lineWrapsToNext","lineString","nextLine","translateToString","substring","select","scrollLines"],"mappings":"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","file":"xterm-addon-search.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SearchAddon\"] = factory();\n\telse\n\t\troot[\"SearchAddon\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, IDisposable, ITerminalAddon } from 'xterm';\n\nexport interface ISearchOptions {\n  regex?: boolean;\n  wholeWord?: boolean;\n  caseSensitive?: boolean;\n  incremental?: boolean;\n}\n\nexport interface ISearchResult {\n  term: string;\n  col: number;\n  row: number;\n}\n\nconst NON_WORD_CHARACTERS = ' ~!@#$%^&*()+`-=[]{}|\\;:\"\\',./<>?';\nconst LINES_CACHE_TIME_TO_LIVE = 15 * 1000; // 15 secs\n\nexport class SearchAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n\n  /**\n   * translateBufferLineToStringWithWrap is a fairly expensive call.\n   * We memoize the calls into an array that has a time based ttl.\n   * _linesCache is also invalidated when the terminal cursor moves.\n   */\n  private _linesCache: string[] | undefined;\n  private _linesCacheTimeoutId = 0;\n  private _cursorMoveListener: IDisposable | undefined;\n  private _resizeListener: IDisposable | undefined;\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  public dispose(): void {}\n\n  /**\n   * Find the next instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @return Whether a result was found.\n   */\n  public findNext(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n\n    if (!term || term.length === 0) {\n      this._terminal.clearSelection();\n      return false;\n    }\n\n    let startCol: number = 0;\n    let startRow = this._terminal.buffer.viewportY;\n\n    if (this._terminal.hasSelection()) {\n      const incremental = searchOptions ? searchOptions.incremental : false;\n      // Start from the selection end if there is a selection\n      // For incremental search, use existing row\n      const currentSelection = this._terminal.getSelectionPosition()!;\n      startRow = incremental ? currentSelection.startRow : currentSelection.endRow;\n      startCol = incremental ? currentSelection.startColumn : currentSelection.endColumn;\n    }\n\n    this._initLinesCache();\n\n    // A row that has isWrapped = false\n    let findingRow = startRow;\n    // index of beginning column that _findInLine need to scan.\n    let cumulativeCols = startCol;\n    // If startRow is wrapped row, scan for unwrapped row above.\n    // So we can start matching on wrapped line from long unwrapped line.\n    let currentLine = this._terminal.buffer.getLine(findingRow);\n    while (currentLine && currentLine.isWrapped) {\n      cumulativeCols += this._terminal.cols;\n      currentLine = this._terminal.buffer.getLine(--findingRow);\n    }\n\n    // Search startRow\n    let result = this._findInLine(term, findingRow, cumulativeCols, searchOptions);\n\n    // Search from startRow + 1 to end\n    if (!result) {\n\n      for (let y = startRow + 1; y < this._terminal.buffer.baseY + this._terminal.rows; y++) {\n\n        // If the current line is wrapped line, increase index of column to ignore the previous scan\n        // Otherwise, reset beginning column index to zero with set new unwrapped line index\n        result = this._findInLine(term, y, 0, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // Search from the top to the startRow (search the whole startRow again in\n    // case startCol > 0)\n    if (!result) {\n      for (let y = 0; y < findingRow; y++) {\n        result = this._findInLine(term, y, 0, searchOptions);\n        if (result) {\n          break;\n        }\n      }\n    }\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result);\n  }\n\n  /**\n   * Find the previous instance of the term, then scroll to and select it. If it\n   * doesn't exist, do nothing.\n   * @param term The search term.\n   * @param searchOptions Search options.\n   * @return Whether a result was found.\n   */\n  public findPrevious(term: string, searchOptions?: ISearchOptions): boolean {\n    if (!this._terminal) {\n      throw new Error('Cannot use addon until it has been loaded');\n    }\n\n    if (!term || term.length === 0) {\n      this._terminal.clearSelection();\n      return false;\n    }\n\n    const isReverseSearch = true;\n    let startRow = this._terminal.buffer.viewportY + this._terminal.rows - 1;\n    let startCol = this._terminal.cols;\n\n    if (this._terminal.hasSelection()) {\n      // Start from the selection start if there is a selection\n      const currentSelection = this._terminal.getSelectionPosition()!;\n      startRow = currentSelection.startRow;\n      startCol = currentSelection.startColumn;\n    }\n\n    this._initLinesCache();\n\n    // Search startRow\n    let result = this._findInLine(term, startRow, startCol, searchOptions, isReverseSearch);\n\n    // Search from startRow - 1 to top\n    if (!result) {\n      // If the line is wrapped line, increase number of columns that is needed to be scanned\n      // Se we can scan on wrapped line from unwrapped line\n      let cumulativeCols = this._terminal.cols;\n      if (this._terminal.buffer.getLine(startRow)!.isWrapped) {\n        cumulativeCols += startCol;\n      }\n      for (let y = startRow - 1; y >= 0; y--) {\n        result = this._findInLine(term, y, cumulativeCols, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n        // If the current line is wrapped line, increase scanning range,\n        // preparing for scanning on unwrapped line\n        const line = this._terminal.buffer.getLine(y);\n        if (line && line.isWrapped) {\n          cumulativeCols += this._terminal.cols;\n        } else {\n          cumulativeCols = this._terminal.cols;\n        }\n      }\n    }\n\n    // Search from the bottom to startRow (search the whole startRow again in\n    // case startCol > 0)\n    if (!result) {\n      const searchFrom = this._terminal.buffer.baseY + this._terminal.rows - 1;\n      let cumulativeCols = this._terminal.cols;\n      for (let y = searchFrom; y >= startRow; y--) {\n        result = this._findInLine(term, y, cumulativeCols, searchOptions, isReverseSearch);\n        if (result) {\n          break;\n        }\n        const line = this._terminal.buffer.getLine(y);\n        if (line && line.isWrapped) {\n          cumulativeCols += this._terminal.cols;\n        } else {\n          cumulativeCols = this._terminal.cols;\n        }\n      }\n    }\n\n    // Set selection and scroll if a result was found\n    return this._selectResult(result);\n  }\n\n  /**\n   * Sets up a line cache with a ttl\n   */\n  private _initLinesCache(): void {\n    const terminal = this._terminal!;\n    if (!this._linesCache) {\n      this._linesCache = new Array(terminal.buffer.length);\n      this._cursorMoveListener = terminal.onCursorMove(() => this._destroyLinesCache());\n      this._resizeListener = terminal.onResize(() => this._destroyLinesCache());\n    }\n\n    window.clearTimeout(this._linesCacheTimeoutId);\n    this._linesCacheTimeoutId = window.setTimeout(() => this._destroyLinesCache(), LINES_CACHE_TIME_TO_LIVE);\n  }\n\n  private _destroyLinesCache(): void {\n    this._linesCache = undefined;\n    if (this._cursorMoveListener) {\n      this._cursorMoveListener.dispose();\n      this._cursorMoveListener = undefined;\n    }\n    if (this._resizeListener) {\n      this._resizeListener.dispose();\n      this._resizeListener = undefined;\n    }\n    if (this._linesCacheTimeoutId) {\n      window.clearTimeout(this._linesCacheTimeoutId);\n      this._linesCacheTimeoutId = 0;\n    }\n  }\n\n  /**\n   * A found substring is a whole word if it doesn't have an alphanumeric character directly adjacent to it.\n   * @param searchIndex starting indext of the potential whole word substring\n   * @param line entire string in which the potential whole word was found\n   * @param term the substring that starts at searchIndex\n   */\n  private _isWholeWord(searchIndex: number, line: string, term: string): boolean {\n    return (((searchIndex === 0) || (NON_WORD_CHARACTERS.indexOf(line[searchIndex - 1]) !== -1)) &&\n        (((searchIndex + term.length) === line.length) || (NON_WORD_CHARACTERS.indexOf(line[searchIndex + term.length]) !== -1)));\n  }\n\n  /**\n   * Searches a line for a search term. Takes the provided terminal line and searches the text line, which may contain\n   * subsequent terminal lines if the text is wrapped. If the provided line number is part of a wrapped text line that\n   * started on an earlier line then it is skipped since it will be properly searched when the terminal line that the\n   * text starts on is searched.\n   * @param term The search term.\n   * @param row The line to  start the search from.\n   * @param col The column to start the search from.\n   * @param searchOptions Search options.\n   * @return The search result if it was found.\n   */\n  protected _findInLine(term: string, row: number, col: number, searchOptions: ISearchOptions = {}, isReverseSearch: boolean = false): ISearchResult | undefined {\n    const terminal = this._terminal!;\n\n    // Ignore wrapped lines, only consider on unwrapped line (first row of command string).\n    const firstLine = terminal.buffer.getLine(row);\n    if (firstLine && firstLine.isWrapped) {\n      return;\n    }\n    let stringLine = this._linesCache ? this._linesCache[row] : void 0;\n    if (stringLine === void 0) {\n      stringLine = this._translateBufferLineToStringWithWrap(row, true);\n      if (this._linesCache) {\n        this._linesCache[row] = stringLine;\n      }\n    }\n\n    const searchTerm = searchOptions.caseSensitive ? term : term.toLowerCase();\n    const searchStringLine = searchOptions.caseSensitive ? stringLine : stringLine.toLowerCase();\n\n    let resultIndex = -1;\n    if (searchOptions.regex) {\n      const searchRegex = RegExp(searchTerm, 'g');\n      let foundTerm: RegExpExecArray | null;\n      if (isReverseSearch) {\n        // This loop will get the resultIndex of the _last_ regex match in the range 0..col\n        while (foundTerm = searchRegex.exec(searchStringLine.slice(0, col))) {\n          resultIndex = searchRegex.lastIndex - foundTerm[0].length;\n          term = foundTerm[0];\n          searchRegex.lastIndex -= (term.length - 1);\n        }\n      } else {\n        foundTerm = searchRegex.exec(searchStringLine.slice(col));\n        if (foundTerm && foundTerm[0].length > 0) {\n          resultIndex = col + (searchRegex.lastIndex - foundTerm[0].length);\n          term = foundTerm[0];\n        }\n      }\n    } else {\n      if (isReverseSearch) {\n        if (col - searchTerm.length >= 0) {\n          resultIndex = searchStringLine.lastIndexOf(searchTerm, col - searchTerm.length);\n        }\n      } else {\n        resultIndex = searchStringLine.indexOf(searchTerm, col);\n      }\n    }\n\n    if (resultIndex >= 0) {\n      // Adjust the row number and search index if needed since a \"line\" of text can span multiple rows\n      if (resultIndex >= terminal.cols) {\n        row += Math.floor(resultIndex / terminal.cols);\n        resultIndex = resultIndex % terminal.cols;\n      }\n      if (searchOptions.wholeWord && !this._isWholeWord(resultIndex, searchStringLine, term)) {\n        return;\n      }\n\n      const line = terminal.buffer.getLine(row);\n\n      if (line) {\n        for (let i = 0; i < resultIndex; i++) {\n          const cell = line.getCell(i);\n          if (!cell) {\n            break;\n          }\n          // Adjust the searchIndex to normalize emoji into single chars\n          const char = cell.char;\n          if (char.length > 1) {\n            resultIndex -= char.length - 1;\n          }\n          // Adjust the searchIndex for empty characters following wide unicode\n          // chars (eg. CJK)\n          const charWidth = cell.width;\n          if (charWidth === 0) {\n            resultIndex++;\n          }\n        }\n      }\n      return {\n        term,\n        col: resultIndex,\n        row\n      };\n    }\n  }\n\n  /**\n   * Translates a buffer line to a string, including subsequent lines if they are wraps.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   */\n  private _translateBufferLineToStringWithWrap(lineIndex: number, trimRight: boolean): string {\n    const terminal = this._terminal!;\n    let lineString = '';\n    let lineWrapsToNext: boolean;\n\n    do {\n      const nextLine = terminal.buffer.getLine(lineIndex + 1);\n      lineWrapsToNext = nextLine ? nextLine.isWrapped : false;\n      const line = terminal.buffer.getLine(lineIndex);\n      if (!line) {\n        break;\n      }\n      lineString += line.translateToString(!lineWrapsToNext && trimRight).substring(0, terminal.cols);\n      lineIndex++;\n    } while (lineWrapsToNext);\n\n    return lineString;\n  }\n\n  /**\n   * Selects and scrolls to a result.\n   * @param result The result to select.\n   * @return Whethera result was selected.\n   */\n  private _selectResult(result: ISearchResult | undefined): boolean {\n    const terminal = this._terminal!;\n    if (!result) {\n      terminal.clearSelection();\n      return false;\n    }\n    terminal.select(result.col, result.row, result.term.length);\n    terminal.scrollLines(result.row - terminal.buffer.viewportY);\n    return true;\n  }\n}\n"],"sourceRoot":""}